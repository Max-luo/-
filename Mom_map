import regions
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
import astropy.units as u
from astropy.utils.data import download_file
from astropy.io import fits  
from astropy.utils import data
from spectral_cube import SpectralCube
from astroquery.esasky import ESASky
from astroquery.utils import TableList
from astropy.wcs import WCS
from astropy import wcs
from reproject import reproject_interp
from spectral_cube import SpectralCube as sc

hi_data = fits.open('I16037-5223_B3_12M_so.fits') [0] # Open the FITS file for reading
cube = sc.read(hi_data,hdu=0)  # Initiate a SpectralCube
# hi_data.close()

cube = cube.with_spectral_unit(u.km / u.s, velocity_convention='radio')

_Tb_m = np.nan_to_num(cube.hdu.data)
# ---------------reduce continuum dimension-----------------
cont_data = np.squeeze(hi_data.data)
cont_data = np.nan_to_num(cont_data)
_data1 = np.squeeze(hi_data.data)
_data1 = np.nan_to_num(_data1)
_w1 = wcs.WCS(hi_data, naxis=2)
hi_data_cont2 = fits.ImageHDU(data=_data1, header=_w1.to_header())

# ------------------------ reduce the noise data for moment maps -----------------------
_data = np.nan_to_num(cube.hdu.data)
_w = wcs.WCS(cube.hdu.header)
rms = np.std(_data[20,:,:])

idm = np.where(_data < rms*3) # bellow the noise level is set to zero.
_data[idm] = 0
sub_cube = sc(data=_data, wcs=_w)
sub_cube= sub_cube.with_spectral_unit(u.km / u.s)
print(rms)


hdu_in = hi_data_cont2
scu_in = sub_cube

sub_cube_slab = sub_cube.spectral_slab(-93 *u.km / u.s, -65.023 *u.km / u.s)

print(sub_cube_slab)

moment_0 = sub_cube_slab.with_spectral_unit(u.km/u.s).moment(order=0)  # Zero-th moment
moment_1 = sub_cube_slab.with_spectral_unit(u.km/u.s).moment(order=1)  # First moment
moment_2 = sub_cube_slab.with_spectral_unit(u.km/u.s).moment(order=2)

moment_0.hdu.data[moment_0.hdu.data<3*rms]=np.nan
moment_1.hdu.data[moment_0.hdu.data<3*rms]=np.nan
moment_2.hdu.data[moment_0.hdu.data<3*rms]=np.nan

moment_0.write('0.fits')
moment_1.write('1.fits')
moment_2.write('2.fits')

print('Moment_0 has units of: ', moment_0.unit)
print('Moment_1 has units of: ', moment_1.unit)
print('Moment_2 has units of: ', moment_2.unit)


# Convert Moment_0 to a Column Density assuming optically thin media
hi_column_density = moment_0 * 1.82 * 10**18 / (u.cm * u.cm) * u.s / u.K / u.km

import aplpy

f=aplpy.FITSFigure('0.fits',figsize=(7, 5))

# f.show_contour('momenet0.fits',colors='yellow',levels=3)
f.show_colorscale(cmap='RdBu_r')
f.recenter(241.908750,-52.5167225, radius=0.00756)
f.add_colorbar()
f.colorbar.set_axis_label_text('[Jy km / (beam s)]')
# f.add_label(241.9086930,-52.5149377,'')
f.show_markers(241.9086930,-52.5149377,marker='^',s=100)
f.show_markers(241.9119117,-52.5165330,marker='^',s=100)
f.show_markers(241.9061029,-52.5170932,marker='^',s=100)
f.show_markers(241.9086105,-52.5169966,marker='o',s=100)
f.axis_labels.show()
f.axis_labels.set_xtext('RA(J2000)')
f.axis_labels.set_ytext('DEC(J2000)')
# f.show_makers()



# Initiate a figure and axis object with WCS projection information
fig = plt.figure(figsize=(14, 10))
ax = fig.add_subplot(111, projection=moment_0.wcs)

# Display the moment map image
im = ax.imshow(moment_0.hdu.data, cmap='RdBu_r')

# Add axes labels
ax.set_xlabel("Galactic Longitude (degrees)", fontsize=16)
ax.set_ylabel("Galactic Latitude (degrees)", fontsize=16)

# Add a colorbar
cbar = plt.colorbar(im, pad=.07)
cbar.set_label('[Jy km / (beam s)]', size=16)

# Overlay set of RA/Dec Axes
overlay = ax.get_coords_overlay('fk5')
overlay.grid(color='white', ls='dotted', lw=2)
overlay[0].set_axislabel('Moment0 of so', fontsize=16)
# overlay[1].set_axislabel('Declination (J2000)', fontsize=16)

# Overplot column density contours
# levels = (1e20, 5e20, 1e21, 3e21, 5e21, 7e21, 1e22)  # Define contour levels to use
# ax.contour(hi_column_density.hdu.data, cmap='Greys_r', alpha=0.8)

# ax.axis([241.5500,241,5400])
ax.set_xlim(110,260)
ax.set_ylim(120,270)

ax.plot(241.9086930,-52.5149377,'ro',markersize=30)
